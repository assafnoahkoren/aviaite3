// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EntityType {
  user
  organization
}

enum VerificationKind {
  email_verification
  password_reset
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String        @id @default(cuid())
  fullName       String?
  email          String        @unique
  password       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Threads        Thread[]
  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: NoAction)
  isActive       Boolean       @default(true)
  AccessControls AccessControl[]
  verified       Boolean       @default(false)
  settings       Json?
  role           Role          @default(USER)

  @@index([organizationId])
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Users     User[]
  isActive  Boolean  @default(true)

  @@index([isActive])
}

model Thread {
  id             String   @id @default(cuid())
  openaiThreadId String
  userId         String
  User           User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  name           String?
  assistantId    String
  profileId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model AccessControl {
  id          String     @id @default(cuid())
  userId      String
  entityId    String
  entityType  EntityType
  accessType  String
  accessLevel Int
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive    Boolean    @default(true)

  @@index([isActive])
  @@index([entityId, entityType])
  @@index([userId])
}

model VerificationToken {
  id         String           @id @default(cuid())
  entityId   String
  entityType EntityType
  kind       VerificationKind
  token      String
  usedAt     DateTime?
  createdAt  DateTime         @default(now())
  expiresAt  DateTime

  @@index([entityId, entityType])
  @@index([expiresAt])
}
