generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String               @id @default(cuid())
  email                 String               @unique
  password              String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  fullName              String?
  isActive              Boolean              @default(true)
  organizationId        String?
  verified              Boolean              @default(false)
  role                  Role                 @default(USER)
  settings              Json?
  deletedAt             DateTime?
  onboardingCompletedAt DateTime?
  onboardingStatus      Json?
  AccessControls        AccessControl[]
  Subscriptions         Subscription[]
  Threads               Thread[]
  TokenBalances         TokenBalance[]
  TokenPurchases        TokenPurchase[]
  Organization          Organization?        @relation(fields: [organizationId], references: [id], onDelete: NoAction)
  UserTokenUsages       UserTokenUsage[]
  UserTutorialStatuses  UserTutorialStatus[]
  VerificationTokens    VerificationToken[]

  @@index([organizationId])
  @@index([deletedAt])
}

model Organization {
  id             String          @id @default(cuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isActive       Boolean         @default(true)
  deletedAt      DateTime?
  Subscriptions  Subscription[]
  TokenBalances  TokenBalance[]
  TokenPurchases TokenPurchase[]
  Users          User[]

  @@index([isActive])
  @@index([deletedAt])
}

model Thread {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  assistantId    String
  profileId      String
  userId         String
  openaiThreadId String
  name           String?
  deletedAt      DateTime?
  User           User      @relation(fields: [userId], references: [id], onDelete: NoAction)
  Messages       Message[]

  @@index([userId])
  @@index([deletedAt])
}

model Message {
  id        String      @id @default(cuid())
  threadId  String
  role      MessageRole
  content   String      @db.Text
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
  Thread    Thread      @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([createdAt])
  @@index([deletedAt])
}

model AccessControl {
  id          String     @id @default(cuid())
  userId      String
  entityId    String
  entityType  EntityType
  accessType  String
  accessLevel Int
  isActive    Boolean    @default(true)
  deletedAt   DateTime?
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([entityId, entityType])
  @@index([userId])
  @@index([deletedAt])
}

model VerificationToken {
  id           String           @id @default(cuid())
  entityId     String
  entityType   EntityType
  kind         VerificationKind
  token        String
  usedAt       DateTime?
  createdAt    DateTime         @default(now())
  expiresAt    DateTime
  deletedAt    DateTime?
  label        String?
  usedByUserId String?
  usedByUser   User?            @relation(fields: [usedByUserId], references: [id])

  @@index([entityId, entityType])
  @@index([expiresAt])
  @@index([deletedAt])
  @@index([usedByUserId])
}

model Product {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  baseTokensPerMonth   Int?
  isRecurring          Boolean               @default(true)
  prices               ProductPrice[]
  SubscriptionProducts SubscriptionProduct[]
  TokenBalances        TokenBalance[]
  TokenPurchases       TokenPurchase[]
  UserTokenUsages      UserTokenUsage[]

  @@index([deletedAt])
  @@index([isRecurring])
}

model ProductPrice {
  id                   String                @id @default(cuid())
  productId            String
  interval             BillingInterval
  priceCents           Int
  currency             String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  Product              Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  SubscriptionProducts SubscriptionProduct[]

  @@unique([productId, interval])
  @@index([deletedAt])
}

model Subscription {
  id                   String                @id @default(cuid())
  userId               String?
  status               String
  startedAt            DateTime              @default(now())
  endsAt               DateTime?
  interval             BillingInterval
  entityType           EntityType            @default(user)
  entityId             String                @default("")
  deletedAt            DateTime?
  organizationId       String?
  tokensLimit          Int                   @default(0) @map("tokens_limit")
  Organization         Organization?         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User                 User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionProducts SubscriptionProduct[]
  UserTokenUsages      UserTokenUsage[]

  @@index([userId])
  @@index([organizationId])
  @@index([deletedAt])
}

model SubscriptionProduct {
  id             String        @id @default(cuid())
  subscriptionId String
  productId      String
  productPriceId String?
  deletedAt      DateTime?
  Product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  ProductPrice   ProductPrice? @relation(fields: [productPriceId], references: [id])
  Subscription   Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, productId])
  @@index([deletedAt])
}

model UserTokenUsage {
  id             String        @id @default(cuid())
  userId         String
  productId      String?
  modelUsed      String
  tokensUsed     Int
  costInCents    Int
  date           DateTime      @default(now())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  organizationId String?
  tokenType      TokenType
  subscriptionId String?
  Product        Product?      @relation(fields: [productId], references: [id], onDelete: Cascade)
  Subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  User           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([productId, date])
  @@index([userId, productId, date])
  @@index([date])
  @@index([modelUsed])
  @@index([deletedAt])
  @@index([organizationId, date])
  @@index([organizationId, productId, date])
  @@index([tokenType])
  @@index([subscriptionId])
}

model UserTutorialStatus {
  id          String    @id @default(cuid())
  userId      String
  tutorialId  String
  completedAt DateTime?
  skippedAt   DateTime?
  currentStep Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorialId])
  @@index([userId])
}

model TokenPurchase {
  id             String        @id @default(cuid())
  userId         String?
  productId      String
  tokenAmount    Int
  priceCents     Int
  currency       String
  createdAt      DateTime      @default(now())
  expiresAt      DateTime?
  deletedAt      DateTime?
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([productId])
  @@index([expiresAt])
  @@index([deletedAt])
}

model TokenBalance {
  id                 String        @id @default(cuid())
  userId             String?
  productId          String
  availableTokens    Int           @default(0)
  monthlyResetTokens Int           @default(0)
  purchasedTokens    Int           @default(0)
  lastResetAt        DateTime      @default(now())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  organizationId     String?
  organization       Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  product            Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([organizationId, productId])
  @@index([userId])
  @@index([organizationId])
  @@index([productId])
}

enum EntityType {
  user
  organization
}

enum VerificationKind {
  email_verification
  password_reset
  registration_permit
}

enum Role {
  USER
  ADMIN
}

enum BillingInterval {
  monthly
  yearly
}

enum TokenType {
  input
  output
}

enum MessageRole {
  user
  assistant
  system
}
