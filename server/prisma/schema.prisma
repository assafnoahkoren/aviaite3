// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EntityType {
  user
  organization
}

enum VerificationKind {
  email_verification
  password_reset
  registration_permit
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 String              @id @default(cuid())
  fullName           String?
  email              String              @unique
  password           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  Threads            Thread[]
  organizationId     String?
  Organization       Organization?       @relation(fields: [organizationId], references: [id], onDelete: NoAction)
  isActive           Boolean             @default(true)
  AccessControls     AccessControl[]
  verified           Boolean             @default(false)
  settings           Json?
  role               Role                @default(USER)
  Subscriptions      Subscription[]
  UserTokenUsages    UserTokenUsage[]
  VerificationTokens VerificationToken[] // Tokens used by this user
  deletedAt          DateTime?

  @@index([organizationId])
  @@index([deletedAt])
}

model Organization {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Users     User[]
  isActive  Boolean   @default(true)
  deletedAt DateTime?

  @@index([isActive])
  @@index([deletedAt])
}

model Thread {
  id             String    @id @default(cuid())
  openaiThreadId String
  userId         String
  User           User      @relation(fields: [userId], references: [id], onDelete: NoAction)
  name           String?
  assistantId    String
  profileId      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@index([userId])
  @@index([deletedAt])
}

model AccessControl {
  id          String     @id @default(cuid())
  userId      String
  entityId    String
  entityType  EntityType
  accessType  String
  accessLevel Int
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive    Boolean    @default(true)
  deletedAt   DateTime?

  @@index([isActive])
  @@index([entityId, entityType])
  @@index([userId])
  @@index([deletedAt])
}

model VerificationToken {
  id           String           @id @default(cuid())
  entityId     String
  entityType   EntityType
  kind         VerificationKind
  token        String
  usedAt       DateTime?
  createdAt    DateTime         @default(now())
  expiresAt    DateTime
  deletedAt    DateTime?
  label        String? // Optional label for registration permits
  usedByUserId String? // Track which user used this token
  usedByUser   User?            @relation(fields: [usedByUserId], references: [id], onDelete: SetNull)

  @@index([entityId, entityType])
  @@index([expiresAt])
  @@index([deletedAt])
  @@index([usedByUserId])
}

enum BillingInterval {
  monthly
  yearly
}

model Product {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  prices               ProductPrice[]
  SubscriptionProducts SubscriptionProduct[]
  UserTokenUsages      UserTokenUsage[]
  deletedAt            DateTime?

  @@index([deletedAt])
}

model ProductPrice {
  id                   String                @id @default(cuid())
  Product              Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId            String
  interval             BillingInterval
  priceCents           Int // E.g., 9900 = $99.00
  currency             String // e.g., "USD"
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  SubscriptionProducts SubscriptionProduct[]
  deletedAt            DateTime?

  @@unique([productId, interval])
  @@index([deletedAt])
}

model Subscription {
  id                   String                @id @default(cuid())
  User                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  status               String // e.g., "active", "cancelled"
  startedAt            DateTime              @default(now())
  endsAt               DateTime?
  interval             BillingInterval
  subscriptionProducts SubscriptionProduct[]
  deletedAt            DateTime?

  // Future-proofing for B2B2C:
  entityType EntityType @default(user)
  entityId   String     @default("") // Points to `User.id` for now

  @@index([userId])
  @@index([deletedAt])
}

model SubscriptionProduct {
  id             String        @id @default(cuid())
  Subscription   Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId String
  Product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String
  ProductPrice   ProductPrice? @relation(fields: [productPriceId], references: [id], onDelete: SetNull)
  productPriceId String?
  deletedAt      DateTime?

  @@unique([subscriptionId, productId])
  @@index([deletedAt])
}

model UserTokenUsage {
  id String @id @default(cuid())

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  modelUsed   String // e.g. "gpt-4", "embedding-ada-002"
  tokensUsed  Int
  costInCents Int // Total cost for this usage event in cents

  date      DateTime  @default(now()) // Use the start of day UTC for daily grouping
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId, date])
  @@index([productId, date])
  @@index([userId, productId, date])
  @@index([date])
  @@index([modelUsed])
  @@index([deletedAt])
}
